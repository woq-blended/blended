// The blended SSL implementation uses a dynamically provisioned SSL Context. This SSLContext
// uses a certificate provider under the covers to obtain a server certificate when required.
// The server certificate is managed in the server's keystore for reuses and refreshed whenever
// it is about to expire.
blended.security {

    ssl {

      // This is the keystore file where the generated server certificate is kept until it expires
      keyStore = ${scepclient.home}/etc/keystore

      // !!! NOTE : Once these passwords are changed, the keystore should be deleted to force a refresh of
      // !!! the server certificate

      // the storepass is used to generate the keystore password
      // this is not the effectively used password 
      storePass = "blended"

      // the keypass is used to generate the private key password
      // this is not the effectively used password 
      keyPass = "mysecret"

      explicit {
        // if defined, it replaces the blended.security.ssl.storePass with an explicitly
        // given password. The passwort will be used as-is.
        // Using the config encryption feature (storePass = "$[encrypted[h79ghg123]") is strongly encouraged.
        storePass = ""
        // if defined, it replaces the blended.security.ssl.keyPass with an explicitly
        // given password. The passwort will be used as-is.
        // Using the config encryption feature (keyPass = "$[encrypted[h79ghg123]") is strongly encouraged.
        keyPass = ""
      }

      // the configuration of the self signed certificate provider. This is required as an initial
      // SCEP request is performed with a self signed certificate. The common name and alternative
      // names will be passed in from the certificate configuration.
      selfsigned {
        validDays="10"
        keyStrength=2048
        signatureAlgorithm="SHA256withRSA"
      }

      // the configuration of the individual certificates. each certificate configuration stands for
      // a server certificate that will be used within the server side ssl context. Certificates are
      // selected via SNI (requires Java 8 or greater). The name of the config block will be used
      // as the alias with in the keystore.
      certificates {
        server1 {
          // The common name and alternative names for the certificate.
          commonName = "CN=server1, O=blended, C=DE"
          logicalHostnames = ["server1"]

          // The certificate provider used for provisioning certificates.
          // The provider 'default' will use self signed certificates; 
          // the provider 'scep' we use a SCEP enabled server
          // to automatically provision server certifacates via SCEP.
          provider = "scep"

          // The amout of days before an certificate expiry the server will try to refresh the certificate.
          // default: 10
          # minValidDays = 10
        }
      }
    }

    scep {
      scepUrl = "http://scep.server.url"

      // The profile, if required by the SCEP server (if unsure, contact the SCEP administrator)
      // default : None
      # scepProfile =

      // The length of the key to sign requests sent to the SCEP server
      // default: 2048
      # keyLength = 2048

      // The signature algorithm to sign requests sent to the SCEP server
      // default: "SHA1withRSA"
      # csrSignAlgorithm = "SHA1withRSA"

      // The challenge password required by the SCEP server
      // default: None
      scepChallenge = "password"
    }
  }