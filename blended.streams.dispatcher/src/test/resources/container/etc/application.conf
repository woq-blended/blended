akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = debug

  log-config-on-start = off

  actor {
    debug {
      receive = off
      lifecycle = on
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      auto-start-journals = [${akka.persistence.journal.plugin}]
      leveldb.native = off
      leveldb.dir = "target/outbound/journal"
    }

    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "target/outbound/snapshots"
  }
}

blended {

  flow {
    header {
      prefix : "App"
      transactionId : "FlowTransId"
      transactionState : "FlowTransState"
      branchId : "FlowBranch"
    }
  }

  activemq {
    brokerstarter {

      broker {
        activemq {
          file: "broker.amq"
          vendor : "activemq"
          provider: "activemq"
          clientId: "amq"
          withSsl : false
          minReconnect : 2 seconds
          connectTimeout : 2 seconds
        }

        sonic {
          file: "sonic.amq"
          vendor : "sonic75"
          provider: "central"
          clientId: "sonic"
          withSsl : false
          minReconnect : 2 seconds
          connectTimeout : 2 seconds
        }

        sagum {
          file: "sagum.amq"
          vendor : "sagum"
          provider: "$[["${blended.flow.header.prefix}"Country]]_queue"
          clientId: "sagum"
          withSsl : false
          minReconnect : 2 seconds
          connectTimeout : 2 seconds
        }
      }
    }
  }

  jms {
    bridge {
      provider : [
        {
          vendor : "activemq"
          provider : "activemq"
          internal : true
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "internal.errors"
          transactions: "internal.transactions"
          cbes = "cbeOut"
          listener: 3
        },
        {
          vendor : "sonic75"
          provider : "central"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "global.error"
          transactions: "$[["${blended.flow.header.prefix}"Country]].global.trans.out"
          cbes: "$[["${blended.flow.header.prefix}"Country]].global.evnt.out"
          listener: 3
        },
        {
          vendor : "sagum"
          provider : "$[["${blended.flow.header.prefix}"Country]]_topic"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "global.error"
          transactions: "global.transactions"
          cbes: "event.out"
          listener: 3
        },
        {
          vendor : "sagum"
          provider : "$[["${blended.flow.header.prefix}"Country]]_queue"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "global.error"
          transactions: "global.transactions"
          cbes: "event.out"
          listener: 3
        }
      ]

      inbound : [
        {
          name = "sonicIn",
          vendor = "sonic75"
          provider = "central"
          from = "sonic.data.in"
        }
      ]
    }
  }

  streams {

    minDelay : 2 seconds
    maxDelay : 2 seconds
    exponential : false

    dispatcher {

      defaultEventVendor = "sonic75"
      defaultEventProvider = "central"

      applicationLogHeader = [
        "ProcessID", "Module", "ModuleLast"
      ]

      defaultHeader = [
        { name = "ComponentName",  expression : "Dispatcher" }
        { name = "RouteName",      expression : "${{#ResourceType}}" }
        { name = "LocationId",     expression : "$[["${blended.flow.header.prefix}"Location(right:4)]]" }
        { name = "CountryId",      expression : "$[["${blended.flow.header.prefix}"Country]]" }
        { name = "QualifiedId",    expression : "$[["${blended.flow.header.prefix}"Country]]$[["${blended.flow.header.prefix}"Location(right:4)]]" }
        { name = "ContainerId",    expression : "${{#ctCtxt.uuid}}" }
        { name = "Timestamp",      expression : "${{new java.util.Date().getTime()}}" }
        { name = "MessageSrcId",   expression : "${{#ctCtxt.containerHostname}}" }
        { name = "ResourceSize",   expression : "${{#envelope.flowMessage.bodySize()}}"}

        { name = "TransactionId",
          expression : "$[["${blended.flow.header.prefix}"Country]]$[["${blended.flow.header.prefix}"Location(right:4)]]-${{new java.text.SimpleDateFormat(\"yyyyMMdd-HHmmssSSS\").format(new java.util.Date(#Timestamp))}}-${{#ctCtxt.nextTransactionCounter}}"
          overwrite : false
        }

        // These properties will be deleted when the dispatcher is entered if they are already set in the message
        { name : ${blended.flow.header.prefix}"BridgeVendor" }
        { name : ${blended.flow.header.prefix}"BridgeProvider" }
        { name : ${blended.flow.header.prefix}"BridgeDestination" }
      ]

      handledExceptions = [
        "blended.streams.dispatcher.internal.builder.IllegalResourceType"
      ]

      resourcetypes = {

        SagTest = {
          withCBE: false
          outbound: [
            {
              outboundHeader: [
                {
                  bridgeDestination: "topic:SagTest"
                }
              ]
            }
          ]
        }

        NoOutbound = {
          withCBE: false
          outbound: []
        }

        # Allow the shop to register with the DataCenter
        NoCbe {
          withCBE: false
          outbound: [
            {
              outboundHeader: [
                {
                  bridgeVendor: "sonic75"
                  bridgeProvider: "central"
                  bridgeDestination: "$[["${blended.flow.header.prefix}"Country]].nocbe"
                }
              ]
            }
          ]
        }

        # Send messages to the scale assortment topic
        WithCbe = {
          outbound: [
            {
              outboundHeader: [
                {
                  bridgeVendor: "activemq"
                  bridgeProvider = "activemq"
                  bridgeDestination = "topic:store/device/scale"
                  header: {
                    DestinationPath = "/opt/import"
                  }
                }
              ]
            }
          ]
        }

        Condition = {
          withCBE: false
          outbound = [
            {
              outboundHeader: [
                {
                  bridgeVendor: "sonic75"
                  bridgeProvider = "central"
                  bridgeDestination: "$[["${blended.flow.header.prefix}"Country]].sib.global.data.out"
                  applicationLogHeader = [
                    "ResourceType", "DestinationFileName", "ClientIP", "DeviceCategory"
                  ]
                  header: {
                    Description = "${{#ResourceType}}"
                    DestinationName = "${{#DestinationFileName}}"
                  }
                },
                {
                  condition = "${{#InStoreCommunication eq '1'}}"
                  bridgeDestination: "ClientToQ"
                  header: {
                    Filename: "${{#DestinationFileName}}"
                    DestinationPath: "/opt/inbound"
                  }
                }
              ]
            }
          ]
        }

        DataClient = {
          withCBE: false
          inbound: {
            inboundUri: "queue:ClientFromQ"
            header: {
              ResourceType: "${{#MsgType}}"
            }
          },
          outbound: [
            {
              outboundHeader: [
                {
                  bridgeVendor: "sagum"
                  bridgeProvider: "$[["${blended.flow.header.prefix}"Country]]_queue"
                  bridgeDestination: "queue:/Qu$[["${blended.flow.header.prefix}"Country]]/data/out"
                }
              ]
            }
          ]
        },

        FanOut = {
          withCBE: false
          outbound: [
            {
              outboundHeader: [
                {
                  bridgeVendor: "sagum"
                  bridgeProvider: "$[["${blended.flow.header.prefix}"Country]]_queue"
                  bridgeDestination: "queue:/Qu$[["${blended.flow.header.prefix}"Country]]/data/out"
                  applicationLogHeader = [
                    "keymetric1", "keymetric2"
                  ]
                }
              ]
            },
            {
              id: "OtherApp"
              outboundHeader: [
                {
                  bridgeDestination: "OtherAppToQueue"
                  timeToLive: "14400000"
                  applicationLogHeader = [
                    "keymetric1", "keymetric3"
                  ]
                }
              ]
            }
          ]
        }
      }
    }
  }
}
