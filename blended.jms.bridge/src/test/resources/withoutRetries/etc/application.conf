akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = debug

  log-config-on-start = off

  actor {
    debug {
      receive = off
      lifecycle = on
    }
  }
}

blended {

  flow {
    header {
      prefix : "App"
      transactionId : ${blended.flow.header.prefix}"FlowTransId"
      transactionState : ${blended.flow.header.prefix}"FlowTransState"
      branchId : ${blended.flow.header.prefix}"FlowBranch"
    }
  }

  activemq {
    brokerstarter {

      broker {
        blended {
          file: "broker.amq"
          provider: "external"
          clientId: "external"
          withSsl : false
        }

        broker2 {
          file: "broker2.amq"
          provider: "internal"
          clientId: "internal"
          withSsl : false
        }
      }
    }
  }

  jms {
    bridge {
      provider : [
        {
          vendor : "activemq"
          provider : "internal"
          internal : true
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "internal.errors"
          transactions: "internal.transactions"
          cbes = "internal.cbes"
          listener: 3
          ackTimeout : 1 second
        },
        {
          vendor : "activemq"
          provider : "external"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "external.errors"
          transactions: "external.transactions"
          cbes = "external.cbes"
          listener: 3
          ackTimeout : 1 second
        }
      ]

      trackInbound : true

      inbound : [
        {
          name = "sampleIn"
          vendor = "activemq"
          provider = "external"
          from = "sampleIn"
          listener = "1"
          ackTimeout : 1 second
        },
        {
          name = "SampleHeaderIn"
          vendor = "activemq"
          provider = "external"
          from = "SampleHeaderIn"
          listener = "1"
          ackTimeout : 1 second
          header : [
            {
              name : "ResourceType"
              expression : "${{#Description}}"
            }
          ]
        }
      ]
    }
  }
}
