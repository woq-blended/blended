akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = debug

  log-config-on-start = off

  actor {
    debug {
      receive = off
      lifecycle = on
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      auto-start-journals = [${akka.persistence.journal.plugin}]
      leveldb.native = off
      leveldb.dir = "target/outbound/journal"
    }

    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "target/outbound/snapshots"
  }
}

blended {

  akka.http {
    host = "0.0.0.0"
    port = 0
    ssl {
      host = "0.0.0.0"
      port = 0
    }
  }

  flow {
    header {
      prefix : "App"
      transactionId : "FlowTransId"
      transactionState : "FlowTransState"
      branchId : "FlowBranch"
    }
  }

  activemq {
    brokerstarter {

      broker {
        activemq {
          file: "broker.amq"
          vendor : "activemq"
          provider: "activemq"
          clientId: "amq"
          withSsl : false
          minReconnect : 2 seconds
          connectTimeout : 2 seconds
        }
      }
    }
  }

  jms {
    bridge {
      provider : [
        {
          vendor : "activemq"
          provider : "activemq"
          internal : true
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errors: "internal.errors"
          transactions: "internal.transactions"
          cbes = "cbeOut"
          listener: 3
          ackTimeout : 1 second
        }
      ]
    }
  }

  streams {

    minDelay : 2 seconds
    maxDelay : 2 seconds
    exponential : false

    dispatcher {

      defaultEventVendor = "sonic75"
      defaultEventProvider = "central"

      applicationLogHeader = [
        "ProcessID", "Module", "ModuleLast"
      ]

      ackTimeout: 1 second

      defaultHeader = [
        {name = "ComponentName", expression: "Dispatcher"}
        {name = "RouteName", expression: "${{#ResourceType}}"}
        {name = "LocationId", expression: "9999"}
        {name = "CountryId", expression: "cc"}
        {name = "QualifiedId", expression: "cc9999"}
        {name = "ContainerId", expression: "${{#ctCtxt.uuid}}"}
        {name = "Timestamp", expression: "${{new java.util.Date().getTime()}}"}
        {name = "MessageSrcId", expression: "${{#ctCtxt.containerHostname}}"}
        {name = "ResourceSize", expression: "${{#envelope.flowMessage.bodySize()}}"}

        {
          name = "TransactionId",
          expression: "cc9999-${{new java.text.SimpleDateFormat(\"yyyyMMdd-HHmmssSSS\").format(new java.util.Date(#Timestamp))}}-${{#ctCtxt.nextTransactionCounter}}"
          overwrite: false
        }

        // These properties will be deleted when the dispatcher is entered if they are already set in the message
        {name: "AppBridgeVendor"}
        {name: "AppBridgeProvider"}
        {name: "AppBridgeDestination"}
      ]

      handledExceptions = [
        "blended.streams.dispatcher.internal.builder.IllegalResourceType"
      ]

      onStartup = {
        DispatcherStarted = "cc;9999"
      }
    }
  }
}
