package blended.launcher.jvmrunner

import java.io.File

import blended.launcher.Launcher
import blended.launcher.test_generated.{JvmLauncherTest, TestOsgiFrameworks}
import blended.testsupport.TestFile
import blended.testsupport.scalatest.LoggingFreeSpec

class OsgiFrameworksTest extends LoggingFreeSpec with TestFile {

  implicit val deletePolicy: TestFile.DeletePolicy = TestFile.DeleteWhenNoFailure

  /**
   * This test tests the [[JvmLauncher]] with various OSGi Frameworks.
   * The used [[TestOsgiFrameworks]] class is generated by mill, which is also
   * responsible for providing the framework JAR.
   */
  "JVM launcher starting a minimal framework" - {

    TestOsgiFrameworks.frameworks.foreach {
      case (frameworkName, frameworkJar) =>
        frameworkName in {
          assert(new File(frameworkJar).exists() == true, s"Framework JAR file does not exists: ${frameworkJar}")
          val launcherConfig =
            s"""frameworkBundle = "${frameworkJar}"
               |startLevel = 10
               |defaultStartLevel = 4
               |frameworkProperties = {
               |  org.osgi.framework.storage.clean = onFirstInit
               |}
               |bundles = []
               |""".stripMargin

          val launcherClasspath = JvmLauncherTest.classpath.mkString(";")

          withTestFile(launcherConfig) { configFile =>
            val args = Seq(
              "start",
              "-cp=" + launcherClasspath,
              "--",
              classOf[Launcher].getName(),
              "--config",
              configFile.getAbsolutePath(),
              "--strict",
              "--test"
            )
            JvmLauncher.run(args.to(Array))
          }
        }
    }
  }
}
